version: "3.9"

networks:
    docker:
        name: ${COMPOSE_PROJECT_NAME}_network

services:
    # DATABASE #
    pgsql:
        container_name: ${COMPOSE_PROJECT_NAME}_pgsql
        # tagging the image with the projet name
        # please always use "docker-compose build"
        # running "docker-compose pull" will try to pull an image of that name from servers,
        # as per docker-compose ^1.6.0 documentation specifies
        image: ${COMPOSE_PROJECT_NAME}_pgsql
        build: pgsql
        networks: [docker]
        volumes:
            # save data on the disk, so it doesn't get erased
            # even if the container goes down
            - ${POSTGRES_DATA_DIRECTORY}:/var/lib/postgresql/data:rw
        environment:
            POSTGRES_DB: ${POSTGRES_DATABASE}
            POSTGRES_USER: ${POSTGRES_USERNAME}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}


    # SERVICES #
    api:
        container_name: ${COMPOSE_PROJECT_NAME}_api
        image: ${COMPOSE_PROJECT_NAME}_api
        build: api
        networks: [docker]
        labels:
            # Enable traefik to redirect traffic to the API
            - "traefik.enable=true"
            - "traefik.http.routers.api.rule=Host(`${PROJECT_URL}`) && PathPrefix(`/api/`)"
            - "traefik.http.routers.api.entrypoints=web"
            - "traefik.http.services.api.loadbalancer.server.port=80"

    frontend:
        container_name: ${COMPOSE_PROJECT_NAME}_frontend
        image: ${COMPOSE_PROJECT_NAME}_frontend
        build: frontend
        networks: [docker]
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.frontend.rule=Host(`${PROJECT_URL}`)"
            - "traefik.http.routers.frontend.entrypoints=web"
            - "traefik.http.services.frontend.loadbalancer.server.port=80"


    # REVERSE PROXY #
    traefik:
        container_name: ${COMPOSE_PROJECT_NAME}_traefik
        image: "traefik:v2.9"
        ports: ["80:80"]
        networks: [docker]
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
        depends_on:
            api:
                condition: service_started
            frontend:
                condition: service_started
